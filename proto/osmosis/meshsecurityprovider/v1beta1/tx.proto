syntax = "proto3";
package osmosis.meshsecurityprovider.v1beta1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "ibc/core/client/v1/client.proto";
import "ibc/lightclients/tendermint/v1/tendermint.proto";
import "tendermint/types/evidence.proto";
import "osmosis/meshsecurityprovider/v1beta1/genesis.proto";

option go_package = "github.com/osmosis-labs/mesh-security-sdk/x/meshsecurityprovider/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the wasm Msg service.
service Msg {
// MsgSubmitConsumerMisbehaviour defines a message that reports a light client attack,
// also known as a misbehaviour, observed on a consumer chain
    rpc SubmitConsumerMisbehaviour(MsgSubmitConsumerMisbehaviour)   
      returns (MsgSubmitConsumerMisbehaviourResponse);
// MsgSubmitConsumerDoubleVoting defines a message that reports
// a double signing infraction observed on a consumer chain
    rpc SubmitConsumerDoubleVoting(MsgSubmitConsumerDoubleVoting)
      returns (MsgSubmitConsumerDoubleVotingResponse);
    rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

}


// MsgSubmitConsumerMisbehaviour defines a message that reports a light client attack,
// also known as a misbehaviour, observed on a consumer chain
message MsgSubmitConsumerMisbehaviour {
  option (cosmos.msg.v1.signer) = "submitter";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string submitter = 1 ;
  // The Misbehaviour of the consumer chain wrapping
  // two conflicting IBC headers
  ibc.lightclients.tendermint.v1.Misbehaviour misbehaviour = 2;
}

message MsgSubmitConsumerMisbehaviourResponse {}


// MsgSubmitConsumerDoubleVoting defines a message that reports
// a double signing infraction observed on a consumer chain
message MsgSubmitConsumerDoubleVoting {
  option (cosmos.msg.v1.signer) = "submitter";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string submitter = 1 ;
  // The equivocation of the consumer chain wrapping
  // an evidence of a validator that signed two conflicting votes
  tendermint.types.DuplicateVoteEvidence duplicate_vote_evidence = 2;
  // The light client header of the infraction block
  ibc.lightclients.tendermint.v1.Header infraction_block_header = 3;
}
message MsgSubmitConsumerDoubleVotingResponse {}

// MsgUpdateParams updates meshsecurityprovider module 's params
message MsgUpdateParams {
  option (amino.name) = "meshsecurityprovider/MsgUpdateParams";
  option (cosmos.msg.v1.signer) = "authority";

  // Authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1;

  // params defines the x/meshsecurityprovider parameters to update.
  Params params = 2 [ (gogoproto.nullable) = false ];

}

message MsgUpdateParamsResponse {}